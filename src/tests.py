import numpy as np
import pandas as pd
import pytest
from sksurv.util import Surv

# run with: pytest -q ./src/tests.py

# import 
import sys
sys.path.append("/Users/le7524ho/PhD_Workspace/PredictRecurrence/src/")
from src.rsf_functions import filter_cpgs_with_cox_lasso  

# This decorator tells pytest that `fake_data` is a fixture:
# a reusable setup function that generates synthetic data
# and can be injected into multiple tests automatically.
@pytest.fixture
def fake_data():
    """Generate fake methylation + survival data for testing."""
    np.random.seed(42)
    n_samples, n_cpgs = 100, 500

    X = pd.DataFrame(
        np.random.randn(n_samples, n_cpgs),
        columns=[f"CpG_{i}" for i in range(n_cpgs)]
    )

    event_times = np.random.exponential(scale=5, size=n_samples)
    events = np.random.binomial(1, 0.6, size=n_samples)

    y = np.array(list(zip(events, event_times)),
                 dtype=[("RFi_event", "bool"), ("RFi_years", "f8")])

    return X, y

def test_filter_cpgs_returns_list(fake_data):
    """Test that filter_cpgs_with_cox_lasso returns a list of valid CpGs."""
    
    # Unpack the fake dataset generated by the fixture
    X, y = fake_data

    # Run the CpG filtering function on the fake training data
    selected_cpgs = filter_cpgs_with_cox_lasso(
        X_train=X,                  # methylation matrix (samples x CpGs)
        y_train=y,                  # survival labels (structured array)
        initial_variance_top_n=50000, # keep top 200 CpGs by variance before Cox Lasso
        l1_ratio_values=[0.9, 1.0], # L1 ratios to try in Cox Lasso
        cox_lasso_cv_folds=3,       # number of CV folds for hyperparameter tuning
        log_prefix="[TEST] "        # prefix for log messages
    )

    # Check that the function returns a list
    assert isinstance(selected_cpgs, list)

    # Check that every selected CpG is actually a column in the input data
    for cpg in selected_cpgs:
        assert cpg in X.columns  # ensures only valid CpG names are returned


